// Generated from Compiler.g4 by ANTLR 4.5.3

package com.ericwadkins.parser;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CompilerLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.5.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		NATIVE=46, RETURN=47, BREAK=48, CONTINUE=49, IF=50, ELSE=51, FOR=52, WHILE=53, 
		DO=54, TYPE=55, NUMBER=56, STRING=57, CHARACTER=58, BOOLEAN=59, VARIABLE=60, 
		WHITESPACE=61;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
		"T__41", "T__42", "T__43", "T__44", "NATIVE", "RETURN", "BREAK", "CONTINUE", 
		"IF", "ELSE", "FOR", "WHILE", "DO", "TYPE", "NUMBER", "STRING", "CHARACTER", 
		"BOOLEAN", "VARIABLE", "WHITESPACE"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "';'", "','", "'{'", "'}'", "'='", "'+='", "'-='", "'*='", "'/='", 
		"'%='", "'**='", "'<<='", "'&='", "'^='", "'|='", "'('", "')'", "'++'", 
		"'--'", "'['", "']'", "'+'", "'-'", "'!'", "'~'", "'**'", "'//'", "'*'", 
		"'/'", "'%'", "'<<'", "'>>'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", 
		"'==='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'[]'", "'native'", "'return'", 
		"'break'", "'continue'", "'if'", "'else'", "'for'", "'while'", "'do'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "NATIVE", 
		"RETURN", "BREAK", "CONTINUE", "IF", "ELSE", "FOR", "WHILE", "DO", "TYPE", 
		"NUMBER", "STRING", "CHARACTER", "BOOLEAN", "VARIABLE", "WHITESPACE"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	    public void reportErrorsAsExceptions() {
	        // To prevent default report to standard error, add this line:
	        removeErrorListeners();
	        
	        addErrorListener(new BaseErrorListener() {
	            public void syntaxError(Recognizer<?, ?> recognizer,
	                                    Object offendingSymbol,
	                                    int line, int charPositionInLine,
	                                    String msg, RecognitionException e) {

	                //throw new ParseCancellationException(msg, e);
	                System.err.println("Invalid character: '" + ((CommonToken) offendingSymbol).getText() + "' on line: " + line + ", index: " + charPositionInLine);
	                System.err.println(msg);
	                System.exit(1);
	            }
	        });
	    }


	public CompilerLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Compiler.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2?\u0226\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\b\3\b\3\b"+
		"\3\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3"+
		"\r\3\16\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3\20\3\21\3\21\3\22\3\22\3"+
		"\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3"+
		"\31\3\31\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\36\3\36\3"+
		"\37\3\37\3 \3 \3 \3!\3!\3!\3\"\3\"\3#\3#\3#\3$\3$\3%\3%\3%\3&\3&\3&\3"+
		"\'\3\'\3\'\3(\3(\3(\3(\3)\3)\3*\3*\3+\3+\3,\3,\3,\3-\3-\3-\3.\3.\3.\3"+
		"/\3/\3/\3/\3/\3/\3/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\61\3\61\3\61"+
		"\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\63\3\63"+
		"\3\63\3\64\3\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\67\3\67\3\67\38\38\38\38\38\38\38\38\38\38\38\38\38\38\3"+
		"8\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\3"+
		"8\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\3"+
		"8\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\3"+
		"8\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\3"+
		"8\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\3"+
		"8\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\3"+
		"8\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\3"+
		"8\38\38\38\38\38\38\58\u01db\n8\39\69\u01de\n9\r9\169\u01df\39\39\69\u01e4"+
		"\n9\r9\169\u01e5\79\u01e8\n9\f9\169\u01eb\139\39\39\79\u01ef\n9\f9\16"+
		"9\u01f2\139\59\u01f4\n9\3:\3:\3:\7:\u01f9\n:\f:\16:\u01fc\13:\3:\3:\3"+
		":\3:\5:\u0202\n:\3;\3;\5;\u0206\n;\3;\3;\3;\3;\5;\u020c\n;\3<\3<\3<\3"+
		"<\3<\3<\3<\3<\3<\5<\u0217\n<\3=\3=\7=\u021b\n=\f=\16=\u021e\13=\3>\6>"+
		"\u0221\n>\r>\16>\u0222\3>\3>\3\u01fa\2?\3\3\5\4\7\5\t\6\13\7\r\b\17\t"+
		"\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27"+
		"-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W"+
		"-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8o9q:s;u<w=y>{?\3\2\7\3\2\62;\3"+
		"\2^^\5\2C\\aac|\6\2\62;C\\aac|\5\2\13\f\17\17\"\"\u0244\2\3\3\2\2\2\2"+
		"\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2"+
		"\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2"+
		"\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2"+
		"\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2"+
		"\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2"+
		"\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2"+
		"K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3"+
		"\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2"+
		"\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2"+
		"q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2\2{\3\2\2\2\3}\3"+
		"\2\2\2\5\177\3\2\2\2\7\u0081\3\2\2\2\t\u0083\3\2\2\2\13\u0085\3\2\2\2"+
		"\r\u0087\3\2\2\2\17\u008a\3\2\2\2\21\u008d\3\2\2\2\23\u0090\3\2\2\2\25"+
		"\u0093\3\2\2\2\27\u0096\3\2\2\2\31\u009a\3\2\2\2\33\u009e\3\2\2\2\35\u00a1"+
		"\3\2\2\2\37\u00a4\3\2\2\2!\u00a7\3\2\2\2#\u00a9\3\2\2\2%\u00ab\3\2\2\2"+
		"\'\u00ae\3\2\2\2)\u00b1\3\2\2\2+\u00b3\3\2\2\2-\u00b5\3\2\2\2/\u00b7\3"+
		"\2\2\2\61\u00b9\3\2\2\2\63\u00bb\3\2\2\2\65\u00bd\3\2\2\2\67\u00c0\3\2"+
		"\2\29\u00c3\3\2\2\2;\u00c5\3\2\2\2=\u00c7\3\2\2\2?\u00c9\3\2\2\2A\u00cc"+
		"\3\2\2\2C\u00cf\3\2\2\2E\u00d1\3\2\2\2G\u00d4\3\2\2\2I\u00d6\3\2\2\2K"+
		"\u00d9\3\2\2\2M\u00dc\3\2\2\2O\u00df\3\2\2\2Q\u00e3\3\2\2\2S\u00e5\3\2"+
		"\2\2U\u00e7\3\2\2\2W\u00e9\3\2\2\2Y\u00ec\3\2\2\2[\u00ef\3\2\2\2]\u00f2"+
		"\3\2\2\2_\u00f9\3\2\2\2a\u0100\3\2\2\2c\u0106\3\2\2\2e\u010f\3\2\2\2g"+
		"\u0112\3\2\2\2i\u0117\3\2\2\2k\u011b\3\2\2\2m\u0121\3\2\2\2o\u01da\3\2"+
		"\2\2q\u01dd\3\2\2\2s\u0201\3\2\2\2u\u020b\3\2\2\2w\u0216\3\2\2\2y\u0218"+
		"\3\2\2\2{\u0220\3\2\2\2}~\7=\2\2~\4\3\2\2\2\177\u0080\7.\2\2\u0080\6\3"+
		"\2\2\2\u0081\u0082\7}\2\2\u0082\b\3\2\2\2\u0083\u0084\7\177\2\2\u0084"+
		"\n\3\2\2\2\u0085\u0086\7?\2\2\u0086\f\3\2\2\2\u0087\u0088\7-\2\2\u0088"+
		"\u0089\7?\2\2\u0089\16\3\2\2\2\u008a\u008b\7/\2\2\u008b\u008c\7?\2\2\u008c"+
		"\20\3\2\2\2\u008d\u008e\7,\2\2\u008e\u008f\7?\2\2\u008f\22\3\2\2\2\u0090"+
		"\u0091\7\61\2\2\u0091\u0092\7?\2\2\u0092\24\3\2\2\2\u0093\u0094\7\'\2"+
		"\2\u0094\u0095\7?\2\2\u0095\26\3\2\2\2\u0096\u0097\7,\2\2\u0097\u0098"+
		"\7,\2\2\u0098\u0099\7?\2\2\u0099\30\3\2\2\2\u009a\u009b\7>\2\2\u009b\u009c"+
		"\7>\2\2\u009c\u009d\7?\2\2\u009d\32\3\2\2\2\u009e\u009f\7(\2\2\u009f\u00a0"+
		"\7?\2\2\u00a0\34\3\2\2\2\u00a1\u00a2\7`\2\2\u00a2\u00a3\7?\2\2\u00a3\36"+
		"\3\2\2\2\u00a4\u00a5\7~\2\2\u00a5\u00a6\7?\2\2\u00a6 \3\2\2\2\u00a7\u00a8"+
		"\7*\2\2\u00a8\"\3\2\2\2\u00a9\u00aa\7+\2\2\u00aa$\3\2\2\2\u00ab\u00ac"+
		"\7-\2\2\u00ac\u00ad\7-\2\2\u00ad&\3\2\2\2\u00ae\u00af\7/\2\2\u00af\u00b0"+
		"\7/\2\2\u00b0(\3\2\2\2\u00b1\u00b2\7]\2\2\u00b2*\3\2\2\2\u00b3\u00b4\7"+
		"_\2\2\u00b4,\3\2\2\2\u00b5\u00b6\7-\2\2\u00b6.\3\2\2\2\u00b7\u00b8\7/"+
		"\2\2\u00b8\60\3\2\2\2\u00b9\u00ba\7#\2\2\u00ba\62\3\2\2\2\u00bb\u00bc"+
		"\7\u0080\2\2\u00bc\64\3\2\2\2\u00bd\u00be\7,\2\2\u00be\u00bf\7,\2\2\u00bf"+
		"\66\3\2\2\2\u00c0\u00c1\7\61\2\2\u00c1\u00c2\7\61\2\2\u00c28\3\2\2\2\u00c3"+
		"\u00c4\7,\2\2\u00c4:\3\2\2\2\u00c5\u00c6\7\61\2\2\u00c6<\3\2\2\2\u00c7"+
		"\u00c8\7\'\2\2\u00c8>\3\2\2\2\u00c9\u00ca\7>\2\2\u00ca\u00cb\7>\2\2\u00cb"+
		"@\3\2\2\2\u00cc\u00cd\7@\2\2\u00cd\u00ce\7@\2\2\u00ceB\3\2\2\2\u00cf\u00d0"+
		"\7>\2\2\u00d0D\3\2\2\2\u00d1\u00d2\7>\2\2\u00d2\u00d3\7?\2\2\u00d3F\3"+
		"\2\2\2\u00d4\u00d5\7@\2\2\u00d5H\3\2\2\2\u00d6\u00d7\7@\2\2\u00d7\u00d8"+
		"\7?\2\2\u00d8J\3\2\2\2\u00d9\u00da\7?\2\2\u00da\u00db\7?\2\2\u00dbL\3"+
		"\2\2\2\u00dc\u00dd\7#\2\2\u00dd\u00de\7?\2\2\u00deN\3\2\2\2\u00df\u00e0"+
		"\7?\2\2\u00e0\u00e1\7?\2\2\u00e1\u00e2\7?\2\2\u00e2P\3\2\2\2\u00e3\u00e4"+
		"\7(\2\2\u00e4R\3\2\2\2\u00e5\u00e6\7`\2\2\u00e6T\3\2\2\2\u00e7\u00e8\7"+
		"~\2\2\u00e8V\3\2\2\2\u00e9\u00ea\7(\2\2\u00ea\u00eb\7(\2\2\u00ebX\3\2"+
		"\2\2\u00ec\u00ed\7~\2\2\u00ed\u00ee\7~\2\2\u00eeZ\3\2\2\2\u00ef\u00f0"+
		"\7]\2\2\u00f0\u00f1\7_\2\2\u00f1\\\3\2\2\2\u00f2\u00f3\7p\2\2\u00f3\u00f4"+
		"\7c\2\2\u00f4\u00f5\7v\2\2\u00f5\u00f6\7k\2\2\u00f6\u00f7\7x\2\2\u00f7"+
		"\u00f8\7g\2\2\u00f8^\3\2\2\2\u00f9\u00fa\7t\2\2\u00fa\u00fb\7g\2\2\u00fb"+
		"\u00fc\7v\2\2\u00fc\u00fd\7w\2\2\u00fd\u00fe\7t\2\2\u00fe\u00ff\7p\2\2"+
		"\u00ff`\3\2\2\2\u0100\u0101\7d\2\2\u0101\u0102\7t\2\2\u0102\u0103\7g\2"+
		"\2\u0103\u0104\7c\2\2\u0104\u0105\7m\2\2\u0105b\3\2\2\2\u0106\u0107\7"+
		"e\2\2\u0107\u0108\7q\2\2\u0108\u0109\7p\2\2\u0109\u010a\7v\2\2\u010a\u010b"+
		"\7k\2\2\u010b\u010c\7p\2\2\u010c\u010d\7w\2\2\u010d\u010e\7g\2\2\u010e"+
		"d\3\2\2\2\u010f\u0110\7k\2\2\u0110\u0111\7h\2\2\u0111f\3\2\2\2\u0112\u0113"+
		"\7g\2\2\u0113\u0114\7n\2\2\u0114\u0115\7u\2\2\u0115\u0116\7g\2\2\u0116"+
		"h\3\2\2\2\u0117\u0118\7h\2\2\u0118\u0119\7q\2\2\u0119\u011a\7t\2\2\u011a"+
		"j\3\2\2\2\u011b\u011c\7y\2\2\u011c\u011d\7j\2\2\u011d\u011e\7k\2\2\u011e"+
		"\u011f\7n\2\2\u011f\u0120\7g\2\2\u0120l\3\2\2\2\u0121\u0122\7f\2\2\u0122"+
		"\u0123\7q\2\2\u0123n\3\2\2\2\u0124\u0125\7e\2\2\u0125\u0126\7j\2\2\u0126"+
		"\u0127\7c\2\2\u0127\u01db\7t\2\2\u0128\u0129\7w\2\2\u0129\u012a\7p\2\2"+
		"\u012a\u012b\7u\2\2\u012b\u012c\7k\2\2\u012c\u012d\7i\2\2\u012d\u012e"+
		"\7p\2\2\u012e\u012f\7g\2\2\u012f\u0130\7f\2\2\u0130\u0131\7\"\2\2\u0131"+
		"\u0132\7e\2\2\u0132\u0133\7j\2\2\u0133\u0134\7c\2\2\u0134\u01db\7t\2\2"+
		"\u0135\u0136\7u\2\2\u0136\u0137\7k\2\2\u0137\u0138\7i\2\2\u0138\u0139"+
		"\7p\2\2\u0139\u013a\7g\2\2\u013a\u013b\7f\2\2\u013b\u013c\7\"\2\2\u013c"+
		"\u013d\7e\2\2\u013d\u013e\7j\2\2\u013e\u013f\7c\2\2\u013f\u01db\7t\2\2"+
		"\u0140\u0141\7k\2\2\u0141\u0142\7p\2\2\u0142\u01db\7v\2\2\u0143\u0144"+
		"\7w\2\2\u0144\u0145\7p\2\2\u0145\u0146\7u\2\2\u0146\u0147\7k\2\2\u0147"+
		"\u0148\7i\2\2\u0148\u0149\7p\2\2\u0149\u014a\7g\2\2\u014a\u014b\7f\2\2"+
		"\u014b\u014c\7\"\2\2\u014c\u014d\7k\2\2\u014d\u014e\7p\2\2\u014e\u01db"+
		"\7v\2\2\u014f\u0150\7u\2\2\u0150\u0151\7k\2\2\u0151\u0152\7i\2\2\u0152"+
		"\u0153\7p\2\2\u0153\u0154\7g\2\2\u0154\u0155\7f\2\2\u0155\u0156\7\"\2"+
		"\2\u0156\u0157\7k\2\2\u0157\u0158\7p\2\2\u0158\u01db\7v\2\2\u0159\u015a"+
		"\7u\2\2\u015a\u015b\7j\2\2\u015b\u015c\7q\2\2\u015c\u015d\7t\2\2\u015d"+
		"\u015e\7v\2\2\u015e\u015f\7\"\2\2\u015f\u0160\7k\2\2\u0160\u0161\7p\2"+
		"\2\u0161\u01db\7v\2\2\u0162\u0163\7w\2\2\u0163\u0164\7p\2\2\u0164\u0165"+
		"\7u\2\2\u0165\u0166\7k\2\2\u0166\u0167\7i\2\2\u0167\u0168\7p\2\2\u0168"+
		"\u0169\7g\2\2\u0169\u016a\7f\2\2\u016a\u016b\7\"\2\2\u016b\u016c\7u\2"+
		"\2\u016c\u016d\7j\2\2\u016d\u016e\7q\2\2\u016e\u016f\7t\2\2\u016f\u0170"+
		"\7v\2\2\u0170\u0171\7\"\2\2\u0171\u0172\7k\2\2\u0172\u0173\7p\2\2\u0173"+
		"\u01db\7v\2\2\u0174\u0175\7u\2\2\u0175\u0176\7k\2\2\u0176\u0177\7i\2\2"+
		"\u0177\u0178\7p\2\2\u0178\u0179\7g\2\2\u0179\u017a\7f\2\2\u017a\u017b"+
		"\7\"\2\2\u017b\u017c\7u\2\2\u017c\u017d\7j\2\2\u017d\u017e\7q\2\2\u017e"+
		"\u017f\7t\2\2\u017f\u0180\7v\2\2\u0180\u0181\7\"\2\2\u0181\u0182\7k\2"+
		"\2\u0182\u0183\7p\2\2\u0183\u01db\7v\2\2\u0184\u0185\7n\2\2\u0185\u0186"+
		"\7q\2\2\u0186\u0187\7p\2\2\u0187\u0188\7i\2\2\u0188\u0189\7\"\2\2\u0189"+
		"\u018a\7k\2\2\u018a\u018b\7p\2\2\u018b\u01db\7v\2\2\u018c\u018d\7w\2\2"+
		"\u018d\u018e\7p\2\2\u018e\u018f\7u\2\2\u018f\u0190\7k\2\2\u0190\u0191"+
		"\7i\2\2\u0191\u0192\7p\2\2\u0192\u0193\7g\2\2\u0193\u0194\7f\2\2\u0194"+
		"\u0195\7\"\2\2\u0195\u0196\7n\2\2\u0196\u0197\7q\2\2\u0197\u0198\7p\2"+
		"\2\u0198\u0199\7i\2\2\u0199\u019a\7\"\2\2\u019a\u019b\7k\2\2\u019b\u019c"+
		"\7p\2\2\u019c\u01db\7v\2\2\u019d\u019e\7u\2\2\u019e\u019f\7k\2\2\u019f"+
		"\u01a0\7i\2\2\u01a0\u01a1\7p\2\2\u01a1\u01a2\7g\2\2\u01a2\u01a3\7f\2\2"+
		"\u01a3\u01a4\7\"\2\2\u01a4\u01a5\7n\2\2\u01a5\u01a6\7q\2\2\u01a6\u01a7"+
		"\7p\2\2\u01a7\u01a8\7i\2\2\u01a8\u01a9\7\"\2\2\u01a9\u01aa\7k\2\2\u01aa"+
		"\u01ab\7p\2\2\u01ab\u01db\7v\2\2\u01ac\u01ad\7h\2\2\u01ad\u01ae\7n\2\2"+
		"\u01ae\u01af\7q\2\2\u01af\u01b0\7c\2\2\u01b0\u01db\7v\2\2\u01b1\u01b2"+
		"\7f\2\2\u01b2\u01b3\7q\2\2\u01b3\u01b4\7w\2\2\u01b4\u01b5\7d\2\2\u01b5"+
		"\u01b6\7n\2\2\u01b6\u01db\7g\2\2\u01b7\u01b8\7n\2\2\u01b8\u01b9\7q\2\2"+
		"\u01b9\u01ba\7p\2\2\u01ba\u01bb\7i\2\2\u01bb\u01bc\7\"\2\2\u01bc\u01bd"+
		"\7f\2\2\u01bd\u01be\7q\2\2\u01be\u01bf\7w\2\2\u01bf\u01c0\7d\2\2\u01c0"+
		"\u01c1\7n\2\2\u01c1\u01db\7g\2\2\u01c2\u01c3\7y\2\2\u01c3\u01c4\7e\2\2"+
		"\u01c4\u01c5\7j\2\2\u01c5\u01c6\7c\2\2\u01c6\u01c7\7t\2\2\u01c7\u01c8"+
		"\7a\2\2\u01c8\u01db\7v\2\2\u01c9\u01ca\7d\2\2\u01ca\u01cb\7q\2\2\u01cb"+
		"\u01cc\7q\2\2\u01cc\u01cd\7n\2\2\u01cd\u01ce\7g\2\2\u01ce\u01cf\7c\2\2"+
		"\u01cf\u01db\7p\2\2\u01d0\u01d1\7x\2\2\u01d1\u01d2\7q\2\2\u01d2\u01d3"+
		"\7k\2\2\u01d3\u01db\7f\2\2\u01d4\u01d5\7u\2\2\u01d5\u01d6\7v\2\2\u01d6"+
		"\u01d7\7t\2\2\u01d7\u01d8\7k\2\2\u01d8\u01d9\7p\2\2\u01d9\u01db\7i\2\2"+
		"\u01da\u0124\3\2\2\2\u01da\u0128\3\2\2\2\u01da\u0135\3\2\2\2\u01da\u0140"+
		"\3\2\2\2\u01da\u0143\3\2\2\2\u01da\u014f\3\2\2\2\u01da\u0159\3\2\2\2\u01da"+
		"\u0162\3\2\2\2\u01da\u0174\3\2\2\2\u01da\u0184\3\2\2\2\u01da\u018c\3\2"+
		"\2\2\u01da\u019d\3\2\2\2\u01da\u01ac\3\2\2\2\u01da\u01b1\3\2\2\2\u01da"+
		"\u01b7\3\2\2\2\u01da\u01c2\3\2\2\2\u01da\u01c9\3\2\2\2\u01da\u01d0\3\2"+
		"\2\2\u01da\u01d4\3\2\2\2\u01dbp\3\2\2\2\u01dc\u01de\t\2\2\2\u01dd\u01dc"+
		"\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01dd\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0"+
		"\u01e9\3\2\2\2\u01e1\u01e3\7.\2\2\u01e2\u01e4\t\2\2\2\u01e3\u01e2\3\2"+
		"\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01e3\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6"+
		"\u01e8\3\2\2\2\u01e7\u01e1\3\2\2\2\u01e8\u01eb\3\2\2\2\u01e9\u01e7\3\2"+
		"\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01f3\3\2\2\2\u01eb\u01e9\3\2\2\2\u01ec"+
		"\u01f0\7\60\2\2\u01ed\u01ef\t\2\2\2\u01ee\u01ed\3\2\2\2\u01ef\u01f2\3"+
		"\2\2\2\u01f0\u01ee\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f4\3\2\2\2\u01f2"+
		"\u01f0\3\2\2\2\u01f3\u01ec\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4r\3\2\2\2"+
		"\u01f5\u01fa\7$\2\2\u01f6\u01f9\7$\2\2\u01f7\u01f9\13\2\2\2\u01f8\u01f6"+
		"\3\2\2\2\u01f8\u01f7\3\2\2\2\u01f9\u01fc\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fa"+
		"\u01f8\3\2\2\2\u01fb\u01fd\3\2\2\2\u01fc\u01fa\3\2\2\2\u01fd\u01fe\n\3"+
		"\2\2\u01fe\u0202\7$\2\2\u01ff\u0200\7$\2\2\u0200\u0202\7$\2\2\u0201\u01f5"+
		"\3\2\2\2\u0201\u01ff\3\2\2\2\u0202t\3\2\2\2\u0203\u0205\7)\2\2\u0204\u0206"+
		"\7^\2\2\u0205\u0204\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u0207\3\2\2\2\u0207"+
		"\u0208\13\2\2\2\u0208\u020c\7)\2\2\u0209\u020a\7)\2\2\u020a\u020c\7)\2"+
		"\2\u020b\u0203\3\2\2\2\u020b\u0209\3\2\2\2\u020cv\3\2\2\2\u020d\u020e"+
		"\7v\2\2\u020e\u020f\7t\2\2\u020f\u0210\7w\2\2\u0210\u0217\7g\2\2\u0211"+
		"\u0212\7h\2\2\u0212\u0213\7c\2\2\u0213\u0214\7n\2\2\u0214\u0215\7u\2\2"+
		"\u0215\u0217\7g\2\2\u0216\u020d\3\2\2\2\u0216\u0211\3\2\2\2\u0217x\3\2"+
		"\2\2\u0218\u021c\t\4\2\2\u0219\u021b\t\5\2\2\u021a\u0219\3\2\2\2\u021b"+
		"\u021e\3\2\2\2\u021c\u021a\3\2\2\2\u021c\u021d\3\2\2\2\u021dz\3\2\2\2"+
		"\u021e\u021c\3\2\2\2\u021f\u0221\t\6\2\2\u0220\u021f\3\2\2\2\u0221\u0222"+
		"\3\2\2\2\u0222\u0220\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0224\3\2\2\2\u0224"+
		"\u0225\b>\2\2\u0225|\3\2\2\2\21\2\u01da\u01df\u01e5\u01e9\u01f0\u01f3"+
		"\u01f8\u01fa\u0201\u0205\u020b\u0216\u021c\u0222\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}